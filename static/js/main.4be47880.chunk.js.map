{"version":3,"sources":["Requests.js","axios.js","Row.js","Banner.js","NavBar.js","App.js","reportWebVitals.js","index.js"],"names":["API_KEY","Requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","useEffect","a","get","request","data","results","fetchData","className","map","movie","src","poster_path","backdrop_path","alt","name","id","Banner","str","n","setMovie","Math","floor","random","length","style","backgroundSize","backgroundPosition","backgroundImage","original_name","overview","substring","NavBar","show","setShow","window","addEventListener","scrollY","removeEventListener","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4be47880.chunk.js","sourcesContent":["const API_KEY = \"5cbb3f030c71dfae0fb74bb50c0e9a45\";\r\n\r\nconst Requests = {\r\n  fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n  fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n  fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n  fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n  fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n  fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n  fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n  fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n};\r\n\r\nexport default Requests;\r\n","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n  baseURL: \"https://api.themoviedb.org/3\",\r\n});\r\n\r\nexport default instance;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport axios from \"./axios\";\r\nimport \"./Row.css\";\r\n\r\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\r\n\r\nfunction Row({ title, fetchUrl, isLargeRow }) {\r\n  const [movies, setMovies] = useState([]);\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const request = await axios.get(fetchUrl);\r\n      setMovies(request.data.results);\r\n      return request;\r\n    }\r\n\r\n    fetchData();\r\n  }, [fetchUrl]);\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <h2 className=\"row_title\">{title}</h2>\r\n\r\n      <div className=\"row_posters\">\r\n        {movies.map((movie) => (\r\n          <img\r\n            key={movie.id}\r\n            className={`row_poster ${isLargeRow && \"row_posterlarge\"}`}\r\n            src={`${base_url}${\r\n              isLargeRow ? movie.poster_path : movie.backdrop_path\r\n            }`}\r\n            alt={movie.name}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Row;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport axios from \"./axios\";\r\nimport Requests from \"./Requests\";\r\nimport \"./Banner.css\";\r\n\r\nfunction Banner() {\r\n  const [movie, setMovie] = useState([]);\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const request = await axios.get(Requests.fetchNetflixOriginals);\r\n      setMovie(\r\n        request.data.results[\r\n          Math.floor(Math.random() * request.data.results.length - 1)\r\n        ]\r\n      );\r\n      return request;\r\n    }\r\n    fetchData();\r\n  }, []);\r\n\r\n  function truncate(str, n) {\r\n    return str?.length > n ? str.substring(0, n - 1) + \"...\" : str;\r\n  }\r\n  return (\r\n    <header\r\n      className=\"banner\"\r\n      style={{\r\n        backgroundSize: \"cover\",\r\n        backgroundPosition: \"center center\",\r\n        backgroundImage: `url(\r\n      \"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\"\r\n    )\r\n    `,\r\n      }}\r\n    >\r\n      <div className=\"banner_content\">\r\n        <h1 className=\"banner_title\">\r\n          {movie?.title || movie?.name || movie?.original_name}\r\n        </h1>\r\n        <div className=\"banner_buttons\">\r\n          <button className=\"banner_button\">Play</button>\r\n          <button className=\"banner_button\">My List</button>\r\n        </div>\r\n        <h1 className=\"banner_descp\">{truncate(movie?.overview, 150)}</h1>\r\n      </div>\r\n\r\n      <div className=\"banner--fadeBottom\" />\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Banner;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./NavBAr.css\";\r\n\r\nfunction NavBar() {\r\n  const [show, setShow] = useState(false);\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"scroll\", () => {\r\n      if (window.scrollY > 100) {\r\n        setShow(true);\r\n      } else setShow(false);\r\n    });\r\n    return () => {\r\n      window.removeEventListener(\"scroll\");\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <div className={`nav ${show && \"nav_trans\"} `}>\r\n        <img\r\n          className={`netflix_logo `}\r\n          src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/0/08/Netflix_2015_logo.svg/799px-Netflix_2015_logo.svg.png\"\r\n          alt=\"NETFLIX\"\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default NavBar;\r\n","import Requests from \"./Requests\";\nimport Row from \"./Row\";\nimport \"./App.css\";\nimport Banner from \"./Banner.js\";\nimport NavBar from \"./NavBar\";\nimport { Route } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <Route>\n      <div className=\"App\">\n        <NavBar />\n        <Banner />\n        <Row\n          title=\"NETFLIX ORIGINAL\"\n          fetchUrl={Requests.fetchNetflixOriginals}\n          isLargeRow\n        />\n        <Row title=\"TRENDNG\" fetchUrl={Requests.fetchTrending} />\n        <Row title=\"COMEDY\" fetchUrl={Requests.fetchComedyMovies} />\n        <Row title=\"TOP RATED\" fetchUrl={Requests.fetchTopRated} />\n        <Row title=\"DOCUMENTARIES\" fetchUrl={Requests.fetchDocumentaries} />\n        <Row title=\"ACTION\" fetchUrl={Requests.fetchActionMovies} />\n        <Row title=\"HORROR\" fetchUrl={Requests.fetchHorrorMovies} />\n        <Row title=\"ROMANCE\" fetchUrl={Requests.fetchRomanceMovies} />\n      </div>\n    </Route>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n    ,\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\nreportWebVitals();\n"],"sourceRoot":""}